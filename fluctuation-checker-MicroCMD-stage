import yfinance as yf
from datetime import datetime, timedelta
import pandas as pd
import requests
import numpy as np

def get_top_cryptos(limit=3000):
    url = f"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page={limit}&page=1&sparkline=false"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [coin['symbol'].upper() for coin in data]
    else:
        print("Failed to fetch cryptocurrency list from CoinGecko")
        return []

def get_crypto_data(symbol, start_date, end_date):
    ticker = yf.Ticker(f"{symbol}-USD")
    data = ticker.history(start=start_date, end=end_date)
    return data

def calculate_daily_change(data):
    data['Daily_Change'] = (data['Close'] - data['Open']) / data['Open'] * 100
    return data

def check_fluctuation(data, min_change, max_change, consecutive_days):
    count = 0
    for change in data['Daily_Change'][::-1]:  # Iterate from the most recent day
        if min_change <= abs(change) <= max_change:
            count += 1
        else:
            count = 0
        if count == consecutive_days:
            return True
    return False

def analyze_cryptos(crypto_list, min_change, max_change, consecutive_days):
    end_date = datetime.now()
    start_date = end_date - timedelta(days=consecutive_days + 5)  # Add buffer days

    results = []

    for crypto in crypto_list:
        try:
            data = get_crypto_data(crypto, start_date, end_date)
            if not data.empty:
                data = calculate_daily_change(data)
                
                if check_fluctuation(data, min_change, max_change, consecutive_days):
                    avg_change = np.mean(np.abs(data['Daily_Change']))
                    results.append((crypto, avg_change))
            else:
                print(f"No data available for {crypto}")
        except Exception as e:
            print(f"Error processing {crypto}: {e}")

    return results

# Fetch top cryptocurrencies from CoinGecko
crypto_list = get_top_cryptos(3000)

# Parameters
min_change = 1
max_change = 10
consecutive_days = 5

fluctuating_cryptos = analyze_cryptos(crypto_list, min_change, max_change, consecutive_days)

# Calculate the average change across all cryptocurrencies
avg_overall_change = np.mean([change for _, change in fluctuating_cryptos])

print(f"Cryptocurrencies fluctuating between {min_change}% and {max_change}% for {consecutive_days} consecutive days:")
for crypto, avg_change in fluctuating_cryptos:
    if avg_change > avg_overall_change:
        print(f"{crypto}* (Avg change: {avg_change:.2f}%)")
    else:
        print(f"{crypto} (Avg change: {avg_change:.2f}%)")

print("\n* indicates cryptocurrencies with above-average daily change, potentially offering higher profit opportunities.")